#! /usr/bin/env zsh -df
setopt errexit pipefail
: ${src:=${PWD}} ${out:=outputs/out}

zparseopts -D -F -a opts -synopsis:=synopsis -no-html -no-pdf

# Base name for our output files. Additional names will be derived
# from these.
base='dungeons_and_gardens'

# If the source file names are given on the command line, we use them
# for the main document. Otherwise we expect them to be specified in the
# environment variable `markdown`, shell-quoted. Similarly, the synopsis
# source file is specified using the `--synopsis` option or the
# `synopsis` environment variable. The file names are taken as relative
# to the `src` directory.
if (( ${#argv} > 0 )) {
  inputs=( ${argv} )
} else {
  inputs=( ${(Q)${(z)markdown}} )  # z: Split into words using shell parsing.
}                                  # Q: Remove quoting.
inputs=( ${src}/${^inputs} )       # ^: RC_PARAM_EXPAND.
if (( ${#inputs} == 0 )) {
  print -Pru2 --  "%F{red}No inputs, bailing.%f"
  exit 2
}
synopsis=${synopsis:-synopsis.md}

tohtml=(
  tohtml
  --site 'Dungeons & Gardens'
  --css styles/main.css
  --filter ${src}/lib/dnd.lua
)
tolatex=(
  tolatex
  --include ${includetex}
  --filter ${src}/lib/dnd.lua
)
sed_for_print=(
  sed -E -e
  's/,bg=full\b/,bg=print/'
)
fonts=(
  luaotfload-tool
  --formats=otf
  --update
)
latexmk=(
  latexmk
  --pdflua
  --interaction=batchmode
  --halt-on-error
)
install=(
  install
  -D -t ${out}
  -m 0644
)
install_styles=(
  install
  -D -t ${out}/styles
  -m 0644
  ${src}/lib/styles/*.css
)
install_assets=(
  install
  -D -t ${out}/assets
  -m 0644
  ${src}/lib/assets/*.jpg
  ${src}/lib/assets/*.woff2
)
outputs=(
  index.html
)

function filename_uri {
  typeset -a sed_for_filename=(
    sed -E
    -e 's/ — /---/g'
    -e 's/—/--/g'
    -e 's/[[:space:]]+/_/g'
    -e 's/&/and/g'
    -e 's/’//g'
  )
  typeset -a tr_for_filename=(
    tr '[:upper:]' '[:lower:]'
  )
  print -rn ${1} | ${sed_for_filename} | ${tr_for_filename}
}

function buildhtml {
  typeset -a chapters=()
  typeset -i n=1
  typeset args name prefix title tmpname
  print -Pru2 -- '%F{magenta}••• Markdown to HTML •••%f'
  if [[ -n ${synopsis} ]] {
    name="$(filename_uri "${base} — Synopsis.html")"
    run ${tohtml} --output "${name}" ${src}/${synopsis}
    outputs+=( ${name} )
  }
  for input ( ${inputs} ) {
    prefix=""
    name=${input:t:r}
    case ${name} in
      *Prequel)
        name="Prequel"
        ;;
      202*—*)
        prefix="Chapter ${n} — "
        let ++n
        ;;
      *)
        ;;
    esac
    tmpname="$(mktemp html_XXXXXX)"
    (( ${rc::=?} )) && exit ${rc}
    args=( --output ${tmpname} ${input} )
    [[ -n ${prefix} ]] && args[1,0]=( --prefix ${prefix} )
    run ${tohtml} ${args}
    title="$(jq -r .title ${tmpname}.json)"
    (( ${rc::=?} )) && exit ${rc}
    run rm -f ${tmpname}.json
    name="$(filename_uri ${title}.html)"
    (( ${rc::=?} )) && exit ${rc}
    run sed -i -E -e "s/@PDFLINK@/${name:r}.pdf/" ${tmpname}
    run mv -f ${tmpname} ${name}
    html_titles+=( ${title} )
    html_filenames+=( ${name} )
  }
}


function buildpdf {
  typeset name
  if [[ ! -d $(kpsewhich -var-value TEXMFVAR)/luatex-cache/generic/fonts ]] {
    print -Pru2 -- '%F{magenta}••• Font caching •••%f'
    run ${fonts}
  }


  print -Pru2 -- '%F{magenta}••• Markdown to LaTeX •••%f'

  [[ -n ${synopsis} ]] && run ${tolatex} --output synopsis.tex ${src}/${synopsis}
  run ${tolatex} --output ${base}.tex ${inputs}
  run ${sed_for_print} ${base}.tex > ${base}-print.tex


  print -Pru2 -- '%F{magenta}••• LaTeX to PDF •••%f'

  name="$(filename_uri ${base})"
  run ${latexmk} --jobname="${name}" ${base}.tex
  run ${latexmk} --jobname="${name}-synopsis" synopsis.tex
  run ${latexmk} --jobname="${name}-print" ${base}-print.tex
  outputs+=( ${name}.pdf ${name}-synopsis.pdf ${name}-print.pdf )


  print -Pru2 -- '%F{magenta}••• Splitting PDF •••%f'

  typeset chapter range
  typeset -i n=1
  run chapters ${name}.log | while read range chapter; do
    case ${chapter} in
      *Prequel)
        chapter="Prequel"
        ;;
      Appendix*)
        n=0  # No chapters follow appendices
        ;;
      *)
        if (( n > 0 )) {
          chapter="Chapter ${n} — ${chapter}"
          let ++n
        }
        ;;
    esac
    split=(
      --pages .
      ${range}
      --
      --linearize
    )
    chapter="$(filename_uri ${chapter})"
    (( ${rc::=?} )) && exit ${rc}
    run qpdf ${name}.pdf ${split} ${chapter}.pdf
    run qpdf "${name}-print.pdf" ${split} "${chapter}-print.pdf"
    pdf_filenames+=( ${chapter}.pdf ${chapter}-print.pdf )
  done
}


(( ${opts[(I)--no-html]} )) || buildhtml
(( ${opts[(I)--no-pdf]} )) || buildpdf


print -Pru2 -- '%F{magenta}••• Index generation •••%f'

cat > index.md <<EOF
---
title: 'Dungeons & Gardens'
...

- [Full Story](dungeons_and_gardens.pdf)
- [Synopsis](dungeons_and_gardens---synopsis.html)

## Individual Chapters

EOF

integer fd
exec {fd}>&1 >>index.md
for (( i=1; i <= ${#html_titles}; i++ )) {
  print -nr -- "- [${html_titles[$i]}]("
  print -nr -- "${html_filenames[$i]}" | jq -sRrj @uri
  print -r -- ")"
}
exec 1>&$fd {fd}>&-

indexhtml=(
  indexhtml
  --css styles/index.css
  --output index.html
  index.md
)
run ${indexhtml}


print -Pru2 -- '%F{magenta}••• Installation •••%f'
run ${install_styles}
run ${install_assets}
run ${install} ${src}/{appendices,chapters,characters}/*.jpg(N)  # N: null if no match
run ${install} ${outputs}
run ${install} ${html_filenames} ${pdf_filenames}

print -Pru2 -- '%F{green}••• BUILD COMPLETE •••%f'
